// Code generated by protoc-gen-go. DO NOT EDIT.
// source: employee/employee.proto

package employee

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Employee struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Designation          string   `protobuf:"bytes,3,opt,name=designation,proto3" json:"designation,omitempty"`
	Salary               float32  `protobuf:"fixed32,4,opt,name=salary,proto3" json:"salary,omitempty"`
	Department           *Dept    `protobuf:"bytes,5,opt,name=department,proto3" json:"department,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Employee) Reset()         { *m = Employee{} }
func (m *Employee) String() string { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()    {}
func (*Employee) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5faaaf42a8ac842, []int{0}
}

func (m *Employee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Employee.Unmarshal(m, b)
}
func (m *Employee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Employee.Marshal(b, m, deterministic)
}
func (m *Employee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employee.Merge(m, src)
}
func (m *Employee) XXX_Size() int {
	return xxx_messageInfo_Employee.Size(m)
}
func (m *Employee) XXX_DiscardUnknown() {
	xxx_messageInfo_Employee.DiscardUnknown(m)
}

var xxx_messageInfo_Employee proto.InternalMessageInfo

func (m *Employee) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Employee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Employee) GetDesignation() string {
	if m != nil {
		return m.Designation
	}
	return ""
}

func (m *Employee) GetSalary() float32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

func (m *Employee) GetDepartment() *Dept {
	if m != nil {
		return m.Department
	}
	return nil
}

type EmployeeRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmployeeRequest) Reset()         { *m = EmployeeRequest{} }
func (m *EmployeeRequest) String() string { return proto.CompactTextString(m) }
func (*EmployeeRequest) ProtoMessage()    {}
func (*EmployeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5faaaf42a8ac842, []int{1}
}

func (m *EmployeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmployeeRequest.Unmarshal(m, b)
}
func (m *EmployeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmployeeRequest.Marshal(b, m, deterministic)
}
func (m *EmployeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeRequest.Merge(m, src)
}
func (m *EmployeeRequest) XXX_Size() int {
	return xxx_messageInfo_EmployeeRequest.Size(m)
}
func (m *EmployeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeRequest proto.InternalMessageInfo

func (m *EmployeeRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Dept struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dept) Reset()         { *m = Dept{} }
func (m *Dept) String() string { return proto.CompactTextString(m) }
func (*Dept) ProtoMessage()    {}
func (*Dept) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5faaaf42a8ac842, []int{2}
}

func (m *Dept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dept.Unmarshal(m, b)
}
func (m *Dept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dept.Marshal(b, m, deterministic)
}
func (m *Dept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dept.Merge(m, src)
}
func (m *Dept) XXX_Size() int {
	return xxx_messageInfo_Dept.Size(m)
}
func (m *Dept) XXX_DiscardUnknown() {
	xxx_messageInfo_Dept.DiscardUnknown(m)
}

var xxx_messageInfo_Dept proto.InternalMessageInfo

func (m *Dept) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Dept) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeptRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeptRequest) Reset()         { *m = DeptRequest{} }
func (m *DeptRequest) String() string { return proto.CompactTextString(m) }
func (*DeptRequest) ProtoMessage()    {}
func (*DeptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5faaaf42a8ac842, []int{3}
}

func (m *DeptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeptRequest.Unmarshal(m, b)
}
func (m *DeptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeptRequest.Marshal(b, m, deterministic)
}
func (m *DeptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeptRequest.Merge(m, src)
}
func (m *DeptRequest) XXX_Size() int {
	return xxx_messageInfo_DeptRequest.Size(m)
}
func (m *DeptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeptRequest proto.InternalMessageInfo

func (m *DeptRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ResponseMessage struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseMessage) Reset()         { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()    {}
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5faaaf42a8ac842, []int{4}
}

func (m *ResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseMessage.Unmarshal(m, b)
}
func (m *ResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseMessage.Marshal(b, m, deterministic)
}
func (m *ResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessage.Merge(m, src)
}
func (m *ResponseMessage) XXX_Size() int {
	return xxx_messageInfo_ResponseMessage.Size(m)
}
func (m *ResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessage proto.InternalMessageInfo

func (m *ResponseMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Employee)(nil), "Employee")
	proto.RegisterType((*EmployeeRequest)(nil), "EmployeeRequest")
	proto.RegisterType((*Dept)(nil), "Dept")
	proto.RegisterType((*DeptRequest)(nil), "DeptRequest")
	proto.RegisterType((*ResponseMessage)(nil), "ResponseMessage")
}

func init() { proto.RegisterFile("employee/employee.proto", fileDescriptor_d5faaaf42a8ac842) }

var fileDescriptor_d5faaaf42a8ac842 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xdf, 0x4a, 0x84, 0x40,
	0x14, 0xc6, 0x77, 0x5c, 0xdd, 0xcd, 0x63, 0xb4, 0x32, 0x17, 0x25, 0x42, 0x30, 0x4d, 0x05, 0x12,
	0x61, 0x60, 0xaf, 0x50, 0xec, 0x55, 0x37, 0x23, 0x3d, 0xc0, 0x94, 0x07, 0x11, 0xd6, 0x3f, 0x39,
	0x53, 0xb0, 0x4f, 0xd1, 0x2b, 0x87, 0xa3, 0xee, 0x8a, 0x14, 0x74, 0x77, 0xfc, 0xce, 0xe7, 0xf9,
	0x7e, 0xe7, 0x0c, 0x5c, 0x60, 0xd9, 0xec, 0xea, 0x3d, 0xe2, 0xc3, 0x58, 0xc4, 0x4d, 0x5b, 0xeb,
	0x9a, 0x7f, 0x13, 0x38, 0x79, 0x1e, 0x24, 0x7a, 0x06, 0x56, 0x91, 0x05, 0x84, 0x91, 0xc8, 0x11,
	0x56, 0x91, 0x51, 0x0a, 0x76, 0x25, 0x4b, 0x0c, 0x2c, 0x46, 0x22, 0x57, 0x98, 0x9a, 0x32, 0xf0,
	0x32, 0x54, 0x45, 0x5e, 0x49, 0x5d, 0xd4, 0x55, 0xb0, 0x34, 0xad, 0xa9, 0x44, 0xcf, 0x61, 0xa5,
	0xe4, 0x4e, 0xb6, 0xfb, 0xc0, 0x66, 0x24, 0xb2, 0xc4, 0xf0, 0x45, 0x6f, 0x01, 0x32, 0x6c, 0x64,
	0xab, 0x4b, 0xac, 0x74, 0xe0, 0x30, 0x12, 0x79, 0x89, 0x13, 0x3f, 0x61, 0xa3, 0xc5, 0xa4, 0xc1,
	0xaf, 0x60, 0x33, 0x02, 0x09, 0xfc, 0xf8, 0x44, 0xa5, 0xe7, 0x5c, 0xfc, 0x0e, 0xec, 0xee, 0xb7,
	0xff, 0xf0, 0xf2, 0x4b, 0xf0, 0x4c, 0xc4, 0x1f, 0xa3, 0xae, 0x61, 0x23, 0x50, 0x35, 0x75, 0xa5,
	0xf0, 0x05, 0x95, 0x92, 0x39, 0x52, 0x1f, 0x96, 0xa5, 0xca, 0x8d, 0xc7, 0x15, 0x5d, 0x99, 0x94,
	0x47, 0xa4, 0x14, 0xdb, 0xaf, 0xe2, 0x1d, 0xe9, 0x3d, 0x78, 0x5b, 0xd4, 0x87, 0xcb, 0xf9, 0xf1,
	0x8c, 0x39, 0x74, 0x0f, 0x0a, 0x5f, 0x74, 0xee, 0x74, 0xe2, 0x3e, 0xf6, 0x42, 0x3f, 0x9e, 0xc5,
	0xf3, 0x45, 0xf2, 0xda, 0x23, 0x8f, 0x51, 0x0c, 0xd6, 0x5b, 0xd4, 0x66, 0xe1, 0xd3, 0x78, 0xb2,
	0x4b, 0xd8, 0x1f, 0x8f, 0x2f, 0xe8, 0x0d, 0xac, 0xd3, 0xc1, 0xd1, 0x6b, 0xbf, 0x8d, 0x7d, 0x5b,
	0x99, 0x17, 0x7f, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x99, 0x14, 0xda, 0x8a, 0x0c, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	GetEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*Employee, error)
	SetEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type employeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeServiceClient(cc *grpc.ClientConn) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) GetEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/EmployeeService/GetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) SetEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/EmployeeService/SetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
type EmployeeServiceServer interface {
	GetEmployee(context.Context, *EmployeeRequest) (*Employee, error)
	SetEmployee(context.Context, *Employee) (*ResponseMessage, error)
}

func RegisterEmployeeServiceServer(s *grpc.Server, srv EmployeeServiceServer) {
	s.RegisterService(&_EmployeeService_serviceDesc, srv)
}

func _EmployeeService_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeService/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_SetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).SetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeService/SetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).SetEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmployeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployee",
			Handler:    _EmployeeService_GetEmployee_Handler,
		},
		{
			MethodName: "SetEmployee",
			Handler:    _EmployeeService_SetEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee/employee.proto",
}

// DeptServiceClient is the client API for DeptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeptServiceClient interface {
	GetDept(ctx context.Context, in *DeptRequest, opts ...grpc.CallOption) (*Dept, error)
	SetDept(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type deptServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeptServiceClient(cc *grpc.ClientConn) DeptServiceClient {
	return &deptServiceClient{cc}
}

func (c *deptServiceClient) GetDept(ctx context.Context, in *DeptRequest, opts ...grpc.CallOption) (*Dept, error) {
	out := new(Dept)
	err := c.cc.Invoke(ctx, "/DeptService/GetDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) SetDept(ctx context.Context, in *Dept, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/DeptService/SetDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeptServiceServer is the server API for DeptService service.
type DeptServiceServer interface {
	GetDept(context.Context, *DeptRequest) (*Dept, error)
	SetDept(context.Context, *Dept) (*ResponseMessage, error)
}

func RegisterDeptServiceServer(s *grpc.Server, srv DeptServiceServer) {
	s.RegisterService(&_DeptService_serviceDesc, srv)
}

func _DeptService_GetDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).GetDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeptService/GetDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).GetDept(ctx, req.(*DeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_SetDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).SetDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeptService/SetDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).SetDept(ctx, req.(*Dept))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeptService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DeptService",
	HandlerType: (*DeptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDept",
			Handler:    _DeptService_GetDept_Handler,
		},
		{
			MethodName: "SetDept",
			Handler:    _DeptService_SetDept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee/employee.proto",
}
